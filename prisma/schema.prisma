generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String    @id @default(cuid())
  email                  String    @unique
  emailVerified          DateTime?
  name                   String?
  image                  String?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt

  // Stripe subscription fields
  stripeCustomerId       String?   @unique
  stripeSubscriptionId   String?   @unique
  stripePriceId          String?
  stripeCurrentPeriodEnd DateTime?

  // Resume
  resumeText             String?   @db.Text

  // Communities (lean approach - simple array of community IDs)
  communities            String[]  @default([])

  accounts          Account[]
  sessions          Session[]
  conversations     Conversation[]
  votes             Vote[]
  validations       Validation[]
  messages          Message[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Conversation {
  id          String    @id @default(cuid())
  userId      String
  title       String    @default("New Conversation")
  isPublic    Boolean   @default(false)
  communityId String    @default("careersy") // Every conversation belongs to a community (defaults to careersy for migration)
  viewCount   Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  Message[]

  @@index([userId])
  @@index([communityId])
  @@index([isPublic])
  @@index([communityId, isPublic])
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  userId         String?
  role           String       // "user" or "assistant"
  content        String       @db.Text
  messageType    String?      @default("comment") // "question" | "answer" | "comment"
  parentId       String?      // For threading
  isAiGenerated  Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt

  conversation      Conversation   @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user              User?          @relation(fields: [userId], references: [id], onDelete: SetNull)
  parent            Message?       @relation("MessageReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies           Message[]      @relation("MessageReplies")
  votes             Vote[]
  validations       Validation[]
  trainingQuestions TrainingData[] @relation("QuestionTraining")
  trainingAnswers   TrainingData[] @relation("AnswerTraining")

  @@index([conversationId])
  @@index([userId])
  @@index([parentId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Communities are managed via JSON config files (lean approach)
// No database tables needed for community metadata

model Vote {
  id        String   @id @default(cuid())
  messageId String
  userId    String
  value     Int      // -1 or 1
  createdAt DateTime @default(now())

  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId])
  @@index([messageId])
  @@index([userId])
}

model Validation {
  id                String   @id @default(cuid())
  messageId         String
  validatedBy       String
  validationType    String   // "affirm" | "contest" | "affirm_and_add"
  additionalContext String?  @db.Text
  createdAt         DateTime @default(now())

  message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  validator User    @relation(fields: [validatedBy], references: [id], onDelete: Cascade)

  @@unique([messageId, validatedBy])
  @@index([messageId])
  @@index([validatedBy])
}

model TrainingData {
  id                String   @id @default(cuid())
  questionMessageId String
  answerMessageId   String
  validationScore   Int      @default(0)
  isValidated       Boolean  @default(false)
  createdAt         DateTime @default(now())

  question Message @relation("QuestionTraining", fields: [questionMessageId], references: [id], onDelete: Cascade)
  answer   Message @relation("AnswerTraining", fields: [answerMessageId], references: [id], onDelete: Cascade)

  @@unique([questionMessageId, answerMessageId])
  @@index([isValidated])
  @@index([questionMessageId])
  @@index([answerMessageId])
}
