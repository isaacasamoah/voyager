generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String       @id @default(cuid())
  email                  String       @unique
  name                   String?
  image                  String?
  createdAt              DateTime     @default(now())
  updatedAt              DateTime     @updatedAt
  emailVerified          DateTime?
  stripeCurrentPeriodEnd DateTime?
  stripeCustomerId       String?      @unique
  stripePriceId          String?
  stripeSubscriptionId   String?      @unique
  resumeText             String?
  communities            String[]     @default([])
  accounts               Account[]
  conversations          Conversation[]
  messages               Message[]
  sessions               Session[]
  validations            Validation[]
  votes                  Vote[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Conversation {
  id                    String    @id @default(cuid())
  userId                String
  title                 String    @default("New Conversation")
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  communityId           String    @default("careersy")
  isPublic              Boolean   @default(false)
  viewCount             Int       @default(0)
  collaborationPrompted Boolean   @default(false)
  collaborationDeclined Boolean   @default(false)
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages              Message[]

  @@index([userId])
  @@index([isPublic])
  @@index([communityId])
  @@index([communityId, isPublic])
}

model Message {
  id                                                   String         @id @default(cuid())
  conversationId                                       String
  role                                                 String
  content                                              String
  createdAt                                            DateTime       @default(now())
  isAiGenerated                                        Boolean        @default(false)
  messageType                                          String?        @default("comment")
  parentId                                             String?
  updatedAt                                            DateTime       @default(now()) @updatedAt
  userId                                               String?
  conversation                                         Conversation   @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  parent                                               Message?       @relation("MessageReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies                                              Message[]      @relation("MessageReplies")
  user                                                 User?          @relation(fields: [userId], references: [id])
  answerTraining                                       TrainingData[] @relation("AnswerMessages")
  questionTraining                                     TrainingData[] @relation("QuestionMessages")
  validations                                          Validation[]
  votes                                                Vote[]

  @@index([userId])
  @@index([parentId])
  @@index([conversationId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Vote {
  id        String   @id @default(cuid())
  messageId String
  userId    String
  value     Int
  createdAt DateTime @default(now())
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId])
  @@index([userId])
  @@index([messageId])
}

model Validation {
  id                String   @id @default(cuid())
  messageId         String
  validatedBy       String
  validationType    String
  additionalContext String?
  createdAt         DateTime @default(now())
  message           Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  validator         User     @relation(fields: [validatedBy], references: [id], onDelete: Cascade)

  @@unique([messageId, validatedBy])
  @@index([validatedBy])
  @@index([messageId])
}

model TrainingData {
  id                String   @id @default(cuid())
  questionMessageId String
  answerMessageId   String
  validationScore   Int      @default(0)
  isValidated       Boolean  @default(false)
  createdAt         DateTime @default(now())
  answerMessage     Message  @relation("AnswerMessages", fields: [answerMessageId], references: [id], onDelete: Cascade)
  questionMessage   Message  @relation("QuestionMessages", fields: [questionMessageId], references: [id], onDelete: Cascade)

  @@unique([questionMessageId, answerMessageId])
  @@index([isValidated])
  @@index([answerMessageId])
  @@index([questionMessageId])
}
