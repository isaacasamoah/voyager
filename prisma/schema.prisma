generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String    @id @default(cuid())
  email                  String    @unique
  emailVerified          DateTime?
  name                   String?
  image                  String?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt

  // Stripe subscription fields
  stripeCustomerId       String?   @unique
  stripeSubscriptionId   String?   @unique
  stripePriceId          String?
  stripeCurrentPeriodEnd DateTime?

  // Resume
  resumeText             String?   @db.Text

  // Communities (lean approach - simple array of community IDs)
  communities            String[]  @default([])

  accounts          Account[]
  sessions          Session[]
  courses           Course[]
  votes             Vote[]
  validations       Validation[]
  logs              Log[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Course {
  id        String    @id @default(cuid())
  userId    String
  title     String    @default("New Course")
  isPublic  Boolean   @default(false)
  voyageId  String    @default("careersy") // Every course belongs to a voyage (community)
  viewCount Int       @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  user User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  logs Log[]

  @@index([userId])
  @@index([voyageId])
  @@index([isPublic])
  @@index([voyageId, isPublic])
  @@map("conversations")
}

model Log {
  id            String       @id @default(cuid())
  courseId      String
  userId        String?
  role          String       // "user" or "assistant"
  entry         String       @db.Text
  logType       String?      @default("comment") // "question" | "answer" | "comment"
  parentId      String?      // For threading
  isAiGenerated Boolean      @default(false)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @default(now()) @updatedAt

  course            Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user              User?        @relation(fields: [userId], references: [id], onDelete: SetNull)
  parent            Log?         @relation("LogReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies           Log[]        @relation("LogReplies")
  votes             Vote[]
  validations       Validation[]
  trainingQuestions TrainingData[] @relation("QuestionTraining")
  trainingAnswers   TrainingData[] @relation("AnswerTraining")

  @@index([courseId])
  @@index([userId])
  @@index([parentId])
  @@map("messages")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Communities are managed via JSON config files (lean approach)
// No database tables needed for community metadata

model Vote {
  id        String   @id @default(cuid())
  logId     String
  userId    String
  value     Int      // -1 or 1
  createdAt DateTime @default(now())

  log  Log  @relation(fields: [logId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([logId, userId])
  @@index([logId])
  @@index([userId])
}

model Validation {
  id                String   @id @default(cuid())
  logId             String
  validatedBy       String
  validationType    String   // "affirm" | "contest" | "affirm_and_add"
  additionalContext String?  @db.Text
  createdAt         DateTime @default(now())

  log       Log  @relation(fields: [logId], references: [id], onDelete: Cascade)
  validator User @relation(fields: [validatedBy], references: [id], onDelete: Cascade)

  @@unique([logId, validatedBy])
  @@index([logId])
  @@index([validatedBy])
}

model TrainingData {
  id              String   @id @default(cuid())
  questionLogId   String
  answerLogId     String
  validationScore Int      @default(0)
  isValidated     Boolean  @default(false)
  createdAt       DateTime @default(now())

  question Log @relation("QuestionTraining", fields: [questionLogId], references: [id], onDelete: Cascade)
  answer   Log @relation("AnswerTraining", fields: [answerLogId], references: [id], onDelete: Cascade)

  @@unique([questionLogId, answerLogId])
  @@index([isValidated])
  @@index([questionLogId])
  @@index([answerLogId])
}
